===================
Ansible
====================
Ansible is a powerful open-source automation tool that allows you to automate various IT tasks, including configuration management, application deployment, and system administration. Ansible provides a wide range of built-in modules to perform specific tasks on target hosts. These modules are used within Ansible playbooks to define the desired state of the system. Here are some commonly used Ansible modules:

    Command Modules:
        command and shell: Execute commands on remote hosts.
        script: Run scripts on remote hosts.
    File Modules:
        copy: Copy files or directories from the control machine to remote hosts.
        template: Render templates and copy them to remote hosts.
        file: Change file attributes, permissions, and ownership.
    Package Modules:
        yum, apt, dnf, etc.: Install, update, or remove packages on various Linux distributions.
    Service Modules:
        service: Manage services (start, stop, restart) on remote hosts.
        systemd: Manage systemd services and timers.
    User and Group Modules:
        user: Manage user accounts on remote hosts.
        group: Manage groups on remote hosts.
    File System Modules:
        mount: Mount or unmount file systems.
        filesystem: Create or delete file systems.
    Database Modules:
        mysql_db, postgresql_db: Manage databases.
        mysql_user, postgresql_user: Manage database users.
    Cloud Modules:
        ec2: Interact with Amazon EC2 instances.
        gcp: Interact with Google Cloud Platform resources.
        azure_rm: Interact with Azure resources.
    Networking Modules:
        ios_command, nxos_command, vyos_command: Run commands on network devices.
        netmiko_send_command: Send commands to network devices using the Netmiko library.
    Notification Modules:
        slack, email, hipchat: Send notifications to various channels.
    Miscellaneous Modules:
        debug: Print debugging information.
        wait_for: Wait for a condition to be true.
        uri: Send HTTP or HTTPS requests and handle responses.
        assert: Assert certain conditions are met.
===================

Installation

====


to run ansible on linux we to download python
    1  yum update -y
    2  wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
	
    3  ls -ltr
    4  yum install epel-release-latest-7.noarch.rpm -y
    5  yum update -y
    6  python
    7  yum install ansible -y
    
    
   10  ansible --version
   11  cat /etc/ansible/hosts
   12  cat /etc/ansible/ansible.cfg  
   --------------------------------------------------------
   
	   
Ansible-engine 
       pulic IP 44.204.163.128
	   privet ip 172.31.93.202
	   
webserver 
       public ip 52.201.222.135
	   private ip 172.31.86.205
	   
	   ansible-engine
	   login as root user 
	   
	   #######define ip of hosts in inventory
	 
	 vi /etc/ansible/hosts
	 add # Ex 1: Ungrouped hosts, specify before any group headers.
		[qalinux]
		172.31.7.192
		172.31.4.39

	######activate inventory
	
	 vi /etc/ansible/ansible.cfg
		inventory      = /etc/ansible/hosts     (uncomment)
		sudo_user      = root                   (uncomment)
		
		usder add and password
		ansible-engine machine
		
			 useradd ansible
			  passwd ansible
			  pm
			  
		on webserver
			useradd ansible
			  passwd ansible
			  pm
			  
		
			  
		login as root user on ansible engine 
			visudo
			add this = 
			root    ALL=(ALL)       ALL
			ansible ALL=(ALL) NOPASSWD:ALL
		
				
		logout 
		sudo su - ansible
		sudo su -
		
	Now 
		
		i want generate ssh-key
		
		every machine have sshd file
		
		login as  root user
		
		updated in all machine
		
			vi /etc/ssh/sshd_config
			
				PermitRootLogin yes  ( uncomment)
				PasswordAuthentication yes  (uncomment)
				#PasswordAuthentication no  (comment)
				
			
		
		 service sshd restart
		  sudo su - ansible
			ssh <private ip of node1>   (service sshd restart  )		
			
			
			login as ansible user
			sudo su - ansible
			ssh-keygen  (after only enter)
			ls -ltra  (created .ssh dir)
			cd .ssh
				ssh-copy-id ansible@172.31.7.192 (webserver)
														    
				# here need of passwd
			cd ..
				ssh <private ip of node>  (no need of passwd)
				
			logout
	   
	   fire command on ansible server as ansible user
	   
	   ansible all -a "ls -ltra"
	   
	   see the files of webserver
	   

=======================================================================


snfc005_64.44.152.85 ansible_host=64.44.152.85 ansible_ssh_pass=r0cKPu1P01 ansible_connection=ssh ansible_port=22 ansible_user=root

--------------xxxx-------------
[all:vars]
ansible_connection=ssh
ansible_ssh_user=root

[config]
62.244.12.240   ansible_ssh_pass="Rwr54Es1v0"
62.244.20.254   ansible_ssh_pass="rLu3a69Jt7"

------------------------------------------------------xxx----

---
- name: Install Nginx on CentOS
  hosts: centos_servers
  become: yes  # To run tasks with sudo privileges
  
  tasks:
    - name: Install Nginx
      yum:
        name: nginx
        state: present  # Ensure that Nginx is installed

    - name: Start Nginx service
      service:
        name: nginx
        state: started  # Ensure that Nginx is running
----------------------------------------------------------------

yum apt copy template user file service


---
  name : Installation of nginx 
  hosts : webservers
  becomae : yes
     tasks:
	    -name: installation nginx
		 yum:
		 name: nginx
		 state: present
		