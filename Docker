1. Images
Images are nothing but a read-only binary template that can build containers.
They also contain metadata that describe the container’s capabilities and needs.
Images are used to store and ship applications.
An image can be used on its own to build a container or customized to add additional
elements to extend the current configuration.
You might create your own images or you might only use those created by others and
published in a registry.
To build your own image, you create a Dockerfile with a simple syntax for defining the steps
needed to create the image and run it.
Each instruction in a Dockerfile creates a layer in the image.
When you change the Dockerfile and rebuild the image, only those layers which have changed
are rebuilt.
This is part of what makes images so lightweight, small, and fast, when compared to other
virtualization technologies.

DOCKER CONTAINERS
A container is a runnable instance of an image.
You can create, start, stop, move, or delete a container using the Docker API or CLI.
You can connect a container to one or more networks, attach storage to it, or even create a new image
based on its current state.
By default, a container is relatively well isolated from other containers and its host machine.
You can control how isolated a container’s network, storage, or other underlying subsystems are from  other containers or from the host machine.
A container is defined by its image as well as any configuration options you provide to it when you  create or start it.
When a container is removed, any changes to its state that are not stored in persistent storage
Disappear.

####################### Docker installation ##############################
prakdoc
docker@123

    1  yum install docker -y
    2  docker
    3  systemctl start docker
    4  systemctl status docker
    5  docker --version
    6  docker --version
    7  docker pull tomee
    8  docker images
    9  docker run tomee
   10  docker images


Docker Commands
--------------------
Working on Images
-------------------------
1 To download a docker image 
   docker pull image_name 


2 To see the list of docker images 
  docker image ls 
  (or) 
  docker images 

3 To delete a docker image from docker host 
  docker rmi image_name/image_id 

4) To upload a docker image into docker hub 
   docker push image_name 

*5) To tag an image 
docker tag   image_name   ipaddress_of_local_registry:5000/image_name 

6) To build an image from a customised container 
  docker   commit  container_name/container_id     new_image_name 

7) To create an image from docker file 
   docker build -t    new_image_name 

8) To search for a docker image 
   docker search image_name 

9)  To delete all images that are not attached to containers 
   docker system prune -a 


++++++++++++++++++++++++++++++++++++++++++++++


Working on containers
-----------------------------

10) To see the list of all running continers 
   docker  container  ls 
   docker ps


11) To see the list of running and stopped containers 
    docker   ps -a 

12) To start a container 
    docker  start  container_name/container_id 


13) To stop a running container 
    docker stop   container_name/container_id 

14) To restart a running container 
   docker restart container_name/container_id 
         To restart after 10 seconds 
   docker restart  -t  10  container_name/container_id 


15) To delete a stopped container 
    docker  rm  container_name/container_id


16) To delete a running container 
    docker  rm  -f  container_name/container id 

17) To stop all running containers 
    docker stop $(docker ps -aq) 

18) To restart all containers 
    docker restart $(docker ps -aq) 

19) To remove all stopped containers 
    docker rm $(docker ps -aq) 

20) To remove all contianers(running and stopped) 
    docker rm -f  $(docker ps -aq)

21) To see the logs generated by a container 
   docker logs container_name/container_id 

22) To see the ports used by a container 
   docker port container_name/container_id 

23) To get detailed info about a container 
   docker inspect container_name/container_id 

24) To go into the shell of a running contianer which is moved into background 
   docker attach container_name/container id 

25) To execute anycommand in a container 
   docker exec -it container_name/container_id command
   Eg: To launch the bash shell in a contianer 
   docker exec -it container_name/container_id    bash 


26) To create a container from a docker image  ( imp )


++++++++++++++++++++++++++++++++++++++++++++++++

Run command options 

-it 	for opening an interactive terminal in a container 


--name 	Used for giving a name to a container 

-d 	Used for running the container in detached mode as a background process 

-e 	Used for passing environment varaibles to the container 



-p 	Used for port mapping between port of container with the dockerhost port.

 
-P 	Used for automatic port mapping ie, it will map the internal port of the container 
                with some port on host machine. 
               This host port will be some number greater than 30000 
-v 	Used for attaching a volume to the container 

--volume-from 	 Used for sharing volume between containers 

--network 	Used to run the contianer on a specific network 
--link 		Used for linking the container for creating a multi container architecture 

--memory  	Used to specify the maximum amount of ram that the container can use 

# docker images   ( There are no images )

To download tomcat image

# docker pull tomee

# docker images		

# docker pull ubuntu

If you do not specify the version, by default, we get latest version

I want to download jenkins

# docker pull jenkins/jenkins

TO create a container from an image


#  docker run       --name c1      -p        7070:8080              tomee


#  docker run         --name   c1   -p    7070:8080   tomee

TO check the tomcat is running or not
http://35.154.212.55:7070

( 7070 is port number mapped in docker host)

Lets remove the container  ( Open another gitbash terminal)

# docker stop  c1


# docker rm -f c1

# docker run --name   mytomcat  -p 7070:8080     -d      tomee

( The above command  runs tomcat in detached mode , so we get out # prompt back )
 
# docker container ls

TO start jenkins
#  docker run --name myjenkins       -p 9090:8080         -d       jenkins/jenkins

To check for jenkins ( Open browser )
 http://65.2.127.233:9090dic

To create ubuntu container

#  docker run --name myubuntu  -it    ubuntu

Observation:  You have automatically entered into ubuntu
# ls  ( To see the list of files in ubuntu )
# exit  ( To comeout of container back to host )

+++++++++++++
Scenario 1:
Start tomcat as a container and name it as "webserver". Perform port mapping and run this container in detached mode

# docker run --name  webserver  -p 7070:8080  -d tomee

To access homepage of the tomcat container
Launch any browser
public_ip_of_dockerhost:7070







docker run -it --name p1 -v /tmp:/app/volume prakash /bin/bash  #commnad to create and share volume between host to container


-it interactive terminal
p1 name of continer
-v volume
/tmp:/app/volume   volume is name of volume /tmp:/app/ default path
prakash name of image
/bin/bash 

